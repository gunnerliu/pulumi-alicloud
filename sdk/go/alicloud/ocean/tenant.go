// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-alicloud/sdk/v3/go/alicloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Tenant struct {
	pulumi.CustomResourceState

	Charset          pulumi.StringOutput    `pulumi:"charset"`
	Cpu              pulumi.IntOutput       `pulumi:"cpu"`
	Description      pulumi.StringPtrOutput `pulumi:"description"`
	InstanceId       pulumi.StringOutput    `pulumi:"instanceId"`
	LogDisk          pulumi.IntPtrOutput    `pulumi:"logDisk"`
	Memory           pulumi.IntOutput       `pulumi:"memory"`
	PrimaryZone      pulumi.StringOutput    `pulumi:"primaryZone"`
	ReadOnlyZoneList pulumi.StringPtrOutput `pulumi:"readOnlyZoneList"`
	TenantMode       pulumi.StringOutput    `pulumi:"tenantMode"`
	TenantName       pulumi.StringOutput    `pulumi:"tenantName"`
	TimeZone         pulumi.StringOutput    `pulumi:"timeZone"`
	UnitNum          pulumi.IntPtrOutput    `pulumi:"unitNum"`
	UserVSwitchId    pulumi.StringOutput    `pulumi:"userVSwitchId"`
	UserVpcId        pulumi.StringOutput    `pulumi:"userVpcId"`
}

// NewTenant registers a new resource with the given unique name, arguments, and options.
func NewTenant(ctx *pulumi.Context,
	name string, args *TenantArgs, opts ...pulumi.ResourceOption) (*Tenant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Charset == nil {
		return nil, errors.New("invalid value for required argument 'Charset'")
	}
	if args.Cpu == nil {
		return nil, errors.New("invalid value for required argument 'Cpu'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Memory == nil {
		return nil, errors.New("invalid value for required argument 'Memory'")
	}
	if args.PrimaryZone == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryZone'")
	}
	if args.TenantMode == nil {
		return nil, errors.New("invalid value for required argument 'TenantMode'")
	}
	if args.TenantName == nil {
		return nil, errors.New("invalid value for required argument 'TenantName'")
	}
	if args.TimeZone == nil {
		return nil, errors.New("invalid value for required argument 'TimeZone'")
	}
	if args.UserVSwitchId == nil {
		return nil, errors.New("invalid value for required argument 'UserVSwitchId'")
	}
	if args.UserVpcId == nil {
		return nil, errors.New("invalid value for required argument 'UserVpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tenant
	err := ctx.RegisterResource("alicloud:ocean/tenant:Tenant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenant gets an existing Tenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantState, opts ...pulumi.ResourceOption) (*Tenant, error) {
	var resource Tenant
	err := ctx.ReadResource("alicloud:ocean/tenant:Tenant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tenant resources.
type tenantState struct {
	Charset          *string `pulumi:"charset"`
	Cpu              *int    `pulumi:"cpu"`
	Description      *string `pulumi:"description"`
	InstanceId       *string `pulumi:"instanceId"`
	LogDisk          *int    `pulumi:"logDisk"`
	Memory           *int    `pulumi:"memory"`
	PrimaryZone      *string `pulumi:"primaryZone"`
	ReadOnlyZoneList *string `pulumi:"readOnlyZoneList"`
	TenantMode       *string `pulumi:"tenantMode"`
	TenantName       *string `pulumi:"tenantName"`
	TimeZone         *string `pulumi:"timeZone"`
	UnitNum          *int    `pulumi:"unitNum"`
	UserVSwitchId    *string `pulumi:"userVSwitchId"`
	UserVpcId        *string `pulumi:"userVpcId"`
}

type TenantState struct {
	Charset          pulumi.StringPtrInput
	Cpu              pulumi.IntPtrInput
	Description      pulumi.StringPtrInput
	InstanceId       pulumi.StringPtrInput
	LogDisk          pulumi.IntPtrInput
	Memory           pulumi.IntPtrInput
	PrimaryZone      pulumi.StringPtrInput
	ReadOnlyZoneList pulumi.StringPtrInput
	TenantMode       pulumi.StringPtrInput
	TenantName       pulumi.StringPtrInput
	TimeZone         pulumi.StringPtrInput
	UnitNum          pulumi.IntPtrInput
	UserVSwitchId    pulumi.StringPtrInput
	UserVpcId        pulumi.StringPtrInput
}

func (TenantState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantState)(nil)).Elem()
}

type tenantArgs struct {
	Charset          string  `pulumi:"charset"`
	Cpu              int     `pulumi:"cpu"`
	Description      *string `pulumi:"description"`
	InstanceId       string  `pulumi:"instanceId"`
	LogDisk          *int    `pulumi:"logDisk"`
	Memory           int     `pulumi:"memory"`
	PrimaryZone      string  `pulumi:"primaryZone"`
	ReadOnlyZoneList *string `pulumi:"readOnlyZoneList"`
	TenantMode       string  `pulumi:"tenantMode"`
	TenantName       string  `pulumi:"tenantName"`
	TimeZone         string  `pulumi:"timeZone"`
	UnitNum          *int    `pulumi:"unitNum"`
	UserVSwitchId    string  `pulumi:"userVSwitchId"`
	UserVpcId        string  `pulumi:"userVpcId"`
}

// The set of arguments for constructing a Tenant resource.
type TenantArgs struct {
	Charset          pulumi.StringInput
	Cpu              pulumi.IntInput
	Description      pulumi.StringPtrInput
	InstanceId       pulumi.StringInput
	LogDisk          pulumi.IntPtrInput
	Memory           pulumi.IntInput
	PrimaryZone      pulumi.StringInput
	ReadOnlyZoneList pulumi.StringPtrInput
	TenantMode       pulumi.StringInput
	TenantName       pulumi.StringInput
	TimeZone         pulumi.StringInput
	UnitNum          pulumi.IntPtrInput
	UserVSwitchId    pulumi.StringInput
	UserVpcId        pulumi.StringInput
}

func (TenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantArgs)(nil)).Elem()
}

type TenantInput interface {
	pulumi.Input

	ToTenantOutput() TenantOutput
	ToTenantOutputWithContext(ctx context.Context) TenantOutput
}

func (*Tenant) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (i *Tenant) ToTenantOutput() TenantOutput {
	return i.ToTenantOutputWithContext(context.Background())
}

func (i *Tenant) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantOutput)
}

// TenantArrayInput is an input type that accepts TenantArray and TenantArrayOutput values.
// You can construct a concrete instance of `TenantArrayInput` via:
//
//	TenantArray{ TenantArgs{...} }
type TenantArrayInput interface {
	pulumi.Input

	ToTenantArrayOutput() TenantArrayOutput
	ToTenantArrayOutputWithContext(context.Context) TenantArrayOutput
}

type TenantArray []TenantInput

func (TenantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tenant)(nil)).Elem()
}

func (i TenantArray) ToTenantArrayOutput() TenantArrayOutput {
	return i.ToTenantArrayOutputWithContext(context.Background())
}

func (i TenantArray) ToTenantArrayOutputWithContext(ctx context.Context) TenantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantArrayOutput)
}

// TenantMapInput is an input type that accepts TenantMap and TenantMapOutput values.
// You can construct a concrete instance of `TenantMapInput` via:
//
//	TenantMap{ "key": TenantArgs{...} }
type TenantMapInput interface {
	pulumi.Input

	ToTenantMapOutput() TenantMapOutput
	ToTenantMapOutputWithContext(context.Context) TenantMapOutput
}

type TenantMap map[string]TenantInput

func (TenantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tenant)(nil)).Elem()
}

func (i TenantMap) ToTenantMapOutput() TenantMapOutput {
	return i.ToTenantMapOutputWithContext(context.Background())
}

func (i TenantMap) ToTenantMapOutputWithContext(ctx context.Context) TenantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantMapOutput)
}

type TenantOutput struct{ *pulumi.OutputState }

func (TenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (o TenantOutput) ToTenantOutput() TenantOutput {
	return o
}

func (o TenantOutput) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return o
}

func (o TenantOutput) Charset() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Charset }).(pulumi.StringOutput)
}

func (o TenantOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntOutput { return v.Cpu }).(pulumi.IntOutput)
}

func (o TenantOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TenantOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o TenantOutput) LogDisk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntPtrOutput { return v.LogDisk }).(pulumi.IntPtrOutput)
}

func (o TenantOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

func (o TenantOutput) PrimaryZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.PrimaryZone }).(pulumi.StringOutput)
}

func (o TenantOutput) ReadOnlyZoneList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringPtrOutput { return v.ReadOnlyZoneList }).(pulumi.StringPtrOutput)
}

func (o TenantOutput) TenantMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.TenantMode }).(pulumi.StringOutput)
}

func (o TenantOutput) TenantName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.TenantName }).(pulumi.StringOutput)
}

func (o TenantOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

func (o TenantOutput) UnitNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Tenant) pulumi.IntPtrOutput { return v.UnitNum }).(pulumi.IntPtrOutput)
}

func (o TenantOutput) UserVSwitchId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.UserVSwitchId }).(pulumi.StringOutput)
}

func (o TenantOutput) UserVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.UserVpcId }).(pulumi.StringOutput)
}

type TenantArrayOutput struct{ *pulumi.OutputState }

func (TenantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tenant)(nil)).Elem()
}

func (o TenantArrayOutput) ToTenantArrayOutput() TenantArrayOutput {
	return o
}

func (o TenantArrayOutput) ToTenantArrayOutputWithContext(ctx context.Context) TenantArrayOutput {
	return o
}

func (o TenantArrayOutput) Index(i pulumi.IntInput) TenantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tenant {
		return vs[0].([]*Tenant)[vs[1].(int)]
	}).(TenantOutput)
}

type TenantMapOutput struct{ *pulumi.OutputState }

func (TenantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tenant)(nil)).Elem()
}

func (o TenantMapOutput) ToTenantMapOutput() TenantMapOutput {
	return o
}

func (o TenantMapOutput) ToTenantMapOutputWithContext(ctx context.Context) TenantMapOutput {
	return o
}

func (o TenantMapOutput) MapIndex(k pulumi.StringInput) TenantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tenant {
		return vs[0].(map[string]*Tenant)[vs[1].(string)]
	}).(TenantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInput)(nil)).Elem(), &Tenant{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantArrayInput)(nil)).Elem(), TenantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TenantMapInput)(nil)).Elem(), TenantMap{})
	pulumi.RegisterOutputType(TenantOutput{})
	pulumi.RegisterOutputType(TenantArrayOutput{})
	pulumi.RegisterOutputType(TenantMapOutput{})
}
