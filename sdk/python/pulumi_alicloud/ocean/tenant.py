# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TenantArgs', 'Tenant']

@pulumi.input_type
class TenantArgs:
    def __init__(__self__, *,
                 charset: pulumi.Input[str],
                 cpu: pulumi.Input[int],
                 instance_id: pulumi.Input[str],
                 memory: pulumi.Input[int],
                 primary_zone: pulumi.Input[str],
                 tenant_mode: pulumi.Input[str],
                 tenant_name: pulumi.Input[str],
                 time_zone: pulumi.Input[str],
                 user_v_switch_id: pulumi.Input[str],
                 user_vpc_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 log_disk: Optional[pulumi.Input[int]] = None,
                 read_only_zone_list: Optional[pulumi.Input[str]] = None,
                 unit_num: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Tenant resource.
        """
        pulumi.set(__self__, "charset", charset)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "primary_zone", primary_zone)
        pulumi.set(__self__, "tenant_mode", tenant_mode)
        pulumi.set(__self__, "tenant_name", tenant_name)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "user_v_switch_id", user_v_switch_id)
        pulumi.set(__self__, "user_vpc_id", user_vpc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if log_disk is not None:
            pulumi.set(__self__, "log_disk", log_disk)
        if read_only_zone_list is not None:
            pulumi.set(__self__, "read_only_zone_list", read_only_zone_list)
        if unit_num is not None:
            pulumi.set(__self__, "unit_num", unit_num)

    @property
    @pulumi.getter
    def charset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: pulumi.Input[str]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="primaryZone")
    def primary_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "primary_zone")

    @primary_zone.setter
    def primary_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_zone", value)

    @property
    @pulumi.getter(name="tenantMode")
    def tenant_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_mode")

    @tenant_mode.setter
    def tenant_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_mode", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="userVSwitchId")
    def user_v_switch_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_v_switch_id")

    @user_v_switch_id.setter
    def user_v_switch_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_v_switch_id", value)

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_vpc_id")

    @user_vpc_id.setter
    def user_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_vpc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="logDisk")
    def log_disk(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_disk")

    @log_disk.setter
    def log_disk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_disk", value)

    @property
    @pulumi.getter(name="readOnlyZoneList")
    def read_only_zone_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_only_zone_list")

    @read_only_zone_list.setter
    def read_only_zone_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_zone_list", value)

    @property
    @pulumi.getter(name="unitNum")
    def unit_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unit_num")

    @unit_num.setter
    def unit_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unit_num", value)


@pulumi.input_type
class _TenantState:
    def __init__(__self__, *,
                 charset: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_disk: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 primary_zone: Optional[pulumi.Input[str]] = None,
                 read_only_zone_list: Optional[pulumi.Input[str]] = None,
                 tenant_mode: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unit_num: Optional[pulumi.Input[int]] = None,
                 user_v_switch_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Tenant resources.
        """
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if log_disk is not None:
            pulumi.set(__self__, "log_disk", log_disk)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if primary_zone is not None:
            pulumi.set(__self__, "primary_zone", primary_zone)
        if read_only_zone_list is not None:
            pulumi.set(__self__, "read_only_zone_list", read_only_zone_list)
        if tenant_mode is not None:
            pulumi.set(__self__, "tenant_mode", tenant_mode)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if unit_num is not None:
            pulumi.set(__self__, "unit_num", unit_num)
        if user_v_switch_id is not None:
            pulumi.set(__self__, "user_v_switch_id", user_v_switch_id)
        if user_vpc_id is not None:
            pulumi.set(__self__, "user_vpc_id", user_vpc_id)

    @property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="logDisk")
    def log_disk(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "log_disk")

    @log_disk.setter
    def log_disk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_disk", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="primaryZone")
    def primary_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_zone")

    @primary_zone.setter
    def primary_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_zone", value)

    @property
    @pulumi.getter(name="readOnlyZoneList")
    def read_only_zone_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_only_zone_list")

    @read_only_zone_list.setter
    def read_only_zone_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_zone_list", value)

    @property
    @pulumi.getter(name="tenantMode")
    def tenant_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_mode")

    @tenant_mode.setter
    def tenant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_mode", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="unitNum")
    def unit_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unit_num")

    @unit_num.setter
    def unit_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unit_num", value)

    @property
    @pulumi.getter(name="userVSwitchId")
    def user_v_switch_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_v_switch_id")

    @user_v_switch_id.setter
    def user_v_switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_v_switch_id", value)

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_vpc_id")

    @user_vpc_id.setter
    def user_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_vpc_id", value)


class Tenant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_disk: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 primary_zone: Optional[pulumi.Input[str]] = None,
                 read_only_zone_list: Optional[pulumi.Input[str]] = None,
                 tenant_mode: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unit_num: Optional[pulumi.Input[int]] = None,
                 user_v_switch_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Tenant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TenantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Tenant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TenantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TenantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_disk: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 primary_zone: Optional[pulumi.Input[str]] = None,
                 read_only_zone_list: Optional[pulumi.Input[str]] = None,
                 tenant_mode: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 unit_num: Optional[pulumi.Input[int]] = None,
                 user_v_switch_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TenantArgs.__new__(TenantArgs)

            if charset is None and not opts.urn:
                raise TypeError("Missing required property 'charset'")
            __props__.__dict__["charset"] = charset
            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["log_disk"] = log_disk
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            if primary_zone is None and not opts.urn:
                raise TypeError("Missing required property 'primary_zone'")
            __props__.__dict__["primary_zone"] = primary_zone
            __props__.__dict__["read_only_zone_list"] = read_only_zone_list
            if tenant_mode is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_mode'")
            __props__.__dict__["tenant_mode"] = tenant_mode
            if tenant_name is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_name'")
            __props__.__dict__["tenant_name"] = tenant_name
            if time_zone is None and not opts.urn:
                raise TypeError("Missing required property 'time_zone'")
            __props__.__dict__["time_zone"] = time_zone
            __props__.__dict__["unit_num"] = unit_num
            if user_v_switch_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_v_switch_id'")
            __props__.__dict__["user_v_switch_id"] = user_v_switch_id
            if user_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_vpc_id'")
            __props__.__dict__["user_vpc_id"] = user_vpc_id
        super(Tenant, __self__).__init__(
            'alicloud:ocean/tenant:Tenant',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            charset: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            log_disk: Optional[pulumi.Input[int]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            primary_zone: Optional[pulumi.Input[str]] = None,
            read_only_zone_list: Optional[pulumi.Input[str]] = None,
            tenant_mode: Optional[pulumi.Input[str]] = None,
            tenant_name: Optional[pulumi.Input[str]] = None,
            time_zone: Optional[pulumi.Input[str]] = None,
            unit_num: Optional[pulumi.Input[int]] = None,
            user_v_switch_id: Optional[pulumi.Input[str]] = None,
            user_vpc_id: Optional[pulumi.Input[str]] = None) -> 'Tenant':
        """
        Get an existing Tenant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TenantState.__new__(_TenantState)

        __props__.__dict__["charset"] = charset
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["log_disk"] = log_disk
        __props__.__dict__["memory"] = memory
        __props__.__dict__["primary_zone"] = primary_zone
        __props__.__dict__["read_only_zone_list"] = read_only_zone_list
        __props__.__dict__["tenant_mode"] = tenant_mode
        __props__.__dict__["tenant_name"] = tenant_name
        __props__.__dict__["time_zone"] = time_zone
        __props__.__dict__["unit_num"] = unit_num
        __props__.__dict__["user_v_switch_id"] = user_v_switch_id
        __props__.__dict__["user_vpc_id"] = user_vpc_id
        return Tenant(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def charset(self) -> pulumi.Output[str]:
        return pulumi.get(self, "charset")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="logDisk")
    def log_disk(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "log_disk")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="primaryZone")
    def primary_zone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary_zone")

    @property
    @pulumi.getter(name="readOnlyZoneList")
    def read_only_zone_list(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "read_only_zone_list")

    @property
    @pulumi.getter(name="tenantMode")
    def tenant_mode(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tenant_mode")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tenant_name")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="unitNum")
    def unit_num(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "unit_num")

    @property
    @pulumi.getter(name="userVSwitchId")
    def user_v_switch_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_v_switch_id")

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "user_vpc_id")

