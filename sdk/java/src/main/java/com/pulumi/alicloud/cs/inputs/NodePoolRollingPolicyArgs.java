// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.cs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolRollingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolRollingPolicyArgs Empty = new NodePoolRollingPolicyArgs();

    /**
     * Maximum parallel number nodes during rolling upgrade. The value of this field should be greater than `0`, and if it&#39;s set to a number less than or equal to `0`, the default setting will be used.
     * 
     */
    @Import(name="maxParallelism")
    private @Nullable Output<Integer> maxParallelism;

    /**
     * @return Maximum parallel number nodes during rolling upgrade. The value of this field should be greater than `0`, and if it&#39;s set to a number less than or equal to `0`, the default setting will be used.
     * 
     */
    public Optional<Output<Integer>> maxParallelism() {
        return Optional.ofNullable(this.maxParallelism);
    }

    private NodePoolRollingPolicyArgs() {}

    private NodePoolRollingPolicyArgs(NodePoolRollingPolicyArgs $) {
        this.maxParallelism = $.maxParallelism;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolRollingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolRollingPolicyArgs $;

        public Builder() {
            $ = new NodePoolRollingPolicyArgs();
        }

        public Builder(NodePoolRollingPolicyArgs defaults) {
            $ = new NodePoolRollingPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxParallelism Maximum parallel number nodes during rolling upgrade. The value of this field should be greater than `0`, and if it&#39;s set to a number less than or equal to `0`, the default setting will be used.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelism(@Nullable Output<Integer> maxParallelism) {
            $.maxParallelism = maxParallelism;
            return this;
        }

        /**
         * @param maxParallelism Maximum parallel number nodes during rolling upgrade. The value of this field should be greater than `0`, and if it&#39;s set to a number less than or equal to `0`, the default setting will be used.
         * 
         * @return builder
         * 
         */
        public Builder maxParallelism(Integer maxParallelism) {
            return maxParallelism(Output.of(maxParallelism));
        }

        public NodePoolRollingPolicyArgs build() {
            return $;
        }
    }

}
