// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.vpn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayState extends com.pulumi.resources.ResourceArgs {

    public static final GatewayState Empty = new GatewayState();

    /**
     * Whether to pay automatically. Default value: `true`. Valid values:
     * - `false`: If automatic payment is not enabled, you need to go to the order center to complete the payment after the order is generated.
     * - `true`: Enable automatic payment, automatic payment order.
     * 
     */
    @Import(name="autoPay")
    private @Nullable Output<Boolean> autoPay;

    /**
     * @return Whether to pay automatically. Default value: `true`. Valid values:
     * - `false`: If automatic payment is not enabled, you need to go to the order center to complete the payment after the order is generated.
     * - `true`: Enable automatic payment, automatic payment order.
     * 
     */
    public Optional<Output<Boolean>> autoPay() {
        return Optional.ofNullable(this.autoPay);
    }

    /**
     * Specifies whether to automatically advertise BGP routes to the virtual private cloud (VPC). Valid values:
     * - `true`: Enable.
     * - `false`: Disable.
     * 
     */
    @Import(name="autoPropagate")
    private @Nullable Output<Boolean> autoPropagate;

    /**
     * @return Specifies whether to automatically advertise BGP routes to the virtual private cloud (VPC). Valid values:
     * - `true`: Enable.
     * - `false`: Disable.
     * 
     */
    public Optional<Output<Boolean>> autoPropagate() {
        return Optional.ofNullable(this.autoPropagate);
    }

    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * The business status of the VPN gateway.
     * 
     */
    @Import(name="businessStatus")
    private @Nullable Output<String> businessStatus;

    /**
     * @return The business status of the VPN gateway.
     * 
     */
    public Optional<Output<String>> businessStatus() {
        return Optional.ofNullable(this.businessStatus);
    }

    /**
     * The description of the VPN instance.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the VPN instance.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable or Disable IPSec VPN. At least one type of VPN should be enabled.
     * 
     */
    @Import(name="enableIpsec")
    private @Nullable Output<Boolean> enableIpsec;

    /**
     * @return Enable or Disable IPSec VPN. At least one type of VPN should be enabled.
     * 
     */
    public Optional<Output<Boolean>> enableIpsec() {
        return Optional.ofNullable(this.enableIpsec);
    }

    /**
     * Enable or Disable SSL VPN.  At least one type of VPN should be enabled.
     * 
     */
    @Import(name="enableSsl")
    private @Nullable Output<Boolean> enableSsl;

    /**
     * @return Enable or Disable SSL VPN.  At least one type of VPN should be enabled.
     * 
     */
    public Optional<Output<Boolean>> enableSsl() {
        return Optional.ofNullable(this.enableSsl);
    }

    /**
     * The charge type for instance. If it is an international site account, the valid value is PostPaid, otherwise PrePaid.
     * Default to PostPaid.
     * 
     */
    @Import(name="instanceChargeType")
    private @Nullable Output<String> instanceChargeType;

    /**
     * @return The charge type for instance. If it is an international site account, the valid value is PostPaid, otherwise PrePaid.
     * Default to PostPaid.
     * 
     */
    public Optional<Output<String>> instanceChargeType() {
        return Optional.ofNullable(this.instanceChargeType);
    }

    /**
     * The internet ip of the VPN.
     * 
     */
    @Import(name="internetIp")
    private @Nullable Output<String> internetIp;

    /**
     * @return The internet ip of the VPN.
     * 
     */
    public Optional<Output<String>> internetIp() {
        return Optional.ofNullable(this.internetIp);
    }

    /**
     * The name of the VPN. Defaults to null.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VPN. Defaults to null.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The filed is only required while the InstanceChargeType is PrePaid. Valid values: [1-9, 12, 24, 36]. Default to 1.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The filed is only required while the InstanceChargeType is PrePaid. Valid values: [1-9, 12, 24, 36]. Default to 1.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The max connections of SSL VPN. Default to 5. The number of connections supported by each account is different.
     * This field is ignored when enable_ssl is false.
     * 
     */
    @Import(name="sslConnections")
    private @Nullable Output<Integer> sslConnections;

    /**
     * @return The max connections of SSL VPN. Default to 5. The number of connections supported by each account is different.
     * This field is ignored when enable_ssl is false.
     * 
     */
    public Optional<Output<Integer>> sslConnections() {
        return Optional.ofNullable(this.sslConnections);
    }

    /**
     * The status of the VPN gateway.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the VPN gateway.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tags of VPN gateway.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return The tags of VPN gateway.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The VPN belongs the vpc_id, the field can&#39;t be changed.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The VPN belongs the vpc_id, the field can&#39;t be changed.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The VPN belongs the vswitch_id, the field can&#39;t be changed.
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<String> vswitchId;

    /**
     * @return The VPN belongs the vswitch_id, the field can&#39;t be changed.
     * 
     */
    public Optional<Output<String>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private GatewayState() {}

    private GatewayState(GatewayState $) {
        this.autoPay = $.autoPay;
        this.autoPropagate = $.autoPropagate;
        this.bandwidth = $.bandwidth;
        this.businessStatus = $.businessStatus;
        this.description = $.description;
        this.enableIpsec = $.enableIpsec;
        this.enableSsl = $.enableSsl;
        this.instanceChargeType = $.instanceChargeType;
        this.internetIp = $.internetIp;
        this.name = $.name;
        this.period = $.period;
        this.sslConnections = $.sslConnections;
        this.status = $.status;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayState $;

        public Builder() {
            $ = new GatewayState();
        }

        public Builder(GatewayState defaults) {
            $ = new GatewayState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoPay Whether to pay automatically. Default value: `true`. Valid values:
         * - `false`: If automatic payment is not enabled, you need to go to the order center to complete the payment after the order is generated.
         * - `true`: Enable automatic payment, automatic payment order.
         * 
         * @return builder
         * 
         */
        public Builder autoPay(@Nullable Output<Boolean> autoPay) {
            $.autoPay = autoPay;
            return this;
        }

        /**
         * @param autoPay Whether to pay automatically. Default value: `true`. Valid values:
         * - `false`: If automatic payment is not enabled, you need to go to the order center to complete the payment after the order is generated.
         * - `true`: Enable automatic payment, automatic payment order.
         * 
         * @return builder
         * 
         */
        public Builder autoPay(Boolean autoPay) {
            return autoPay(Output.of(autoPay));
        }

        /**
         * @param autoPropagate Specifies whether to automatically advertise BGP routes to the virtual private cloud (VPC). Valid values:
         * - `true`: Enable.
         * - `false`: Disable.
         * 
         * @return builder
         * 
         */
        public Builder autoPropagate(@Nullable Output<Boolean> autoPropagate) {
            $.autoPropagate = autoPropagate;
            return this;
        }

        /**
         * @param autoPropagate Specifies whether to automatically advertise BGP routes to the virtual private cloud (VPC). Valid values:
         * - `true`: Enable.
         * - `false`: Disable.
         * 
         * @return builder
         * 
         */
        public Builder autoPropagate(Boolean autoPropagate) {
            return autoPropagate(Output.of(autoPropagate));
        }

        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param businessStatus The business status of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(@Nullable Output<String> businessStatus) {
            $.businessStatus = businessStatus;
            return this;
        }

        /**
         * @param businessStatus The business status of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(String businessStatus) {
            return businessStatus(Output.of(businessStatus));
        }

        /**
         * @param description The description of the VPN instance.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the VPN instance.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableIpsec Enable or Disable IPSec VPN. At least one type of VPN should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableIpsec(@Nullable Output<Boolean> enableIpsec) {
            $.enableIpsec = enableIpsec;
            return this;
        }

        /**
         * @param enableIpsec Enable or Disable IPSec VPN. At least one type of VPN should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableIpsec(Boolean enableIpsec) {
            return enableIpsec(Output.of(enableIpsec));
        }

        /**
         * @param enableSsl Enable or Disable SSL VPN.  At least one type of VPN should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableSsl(@Nullable Output<Boolean> enableSsl) {
            $.enableSsl = enableSsl;
            return this;
        }

        /**
         * @param enableSsl Enable or Disable SSL VPN.  At least one type of VPN should be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enableSsl(Boolean enableSsl) {
            return enableSsl(Output.of(enableSsl));
        }

        /**
         * @param instanceChargeType The charge type for instance. If it is an international site account, the valid value is PostPaid, otherwise PrePaid.
         * Default to PostPaid.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(@Nullable Output<String> instanceChargeType) {
            $.instanceChargeType = instanceChargeType;
            return this;
        }

        /**
         * @param instanceChargeType The charge type for instance. If it is an international site account, the valid value is PostPaid, otherwise PrePaid.
         * Default to PostPaid.
         * 
         * @return builder
         * 
         */
        public Builder instanceChargeType(String instanceChargeType) {
            return instanceChargeType(Output.of(instanceChargeType));
        }

        /**
         * @param internetIp The internet ip of the VPN.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(@Nullable Output<String> internetIp) {
            $.internetIp = internetIp;
            return this;
        }

        /**
         * @param internetIp The internet ip of the VPN.
         * 
         * @return builder
         * 
         */
        public Builder internetIp(String internetIp) {
            return internetIp(Output.of(internetIp));
        }

        /**
         * @param name The name of the VPN. Defaults to null.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VPN. Defaults to null.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param period The filed is only required while the InstanceChargeType is PrePaid. Valid values: [1-9, 12, 24, 36]. Default to 1.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The filed is only required while the InstanceChargeType is PrePaid. Valid values: [1-9, 12, 24, 36]. Default to 1.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param sslConnections The max connections of SSL VPN. Default to 5. The number of connections supported by each account is different.
         * This field is ignored when enable_ssl is false.
         * 
         * @return builder
         * 
         */
        public Builder sslConnections(@Nullable Output<Integer> sslConnections) {
            $.sslConnections = sslConnections;
            return this;
        }

        /**
         * @param sslConnections The max connections of SSL VPN. Default to 5. The number of connections supported by each account is different.
         * This field is ignored when enable_ssl is false.
         * 
         * @return builder
         * 
         */
        public Builder sslConnections(Integer sslConnections) {
            return sslConnections(Output.of(sslConnections));
        }

        /**
         * @param status The status of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tags of VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of VPN gateway.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpcId The VPN belongs the vpc_id, the field can&#39;t be changed.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPN belongs the vpc_id, the field can&#39;t be changed.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The VPN belongs the vswitch_id, the field can&#39;t be changed.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The VPN belongs the vswitch_id, the field can&#39;t be changed.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public GatewayState build() {
            return $;
        }
    }

}
