// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.eventbridge.outputs;

import com.pulumi.alicloud.eventbridge.outputs.RuleTargetDeadLetterQueue;
import com.pulumi.alicloud.eventbridge.outputs.RuleTargetParamList;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuleTarget {
    /**
     * @return Dead letter queue. Events that are not processed or exceed the number of retries will be written to the dead letter. Support message service MNS and message queue RocketMQ. See the following `Block dead_letter_queue`.
     * 
     */
    private @Nullable RuleTargetDeadLetterQueue deadLetterQueue;
    /**
     * @return The endpoint of target.
     * 
     */
    private String endpoint;
    /**
     * @return A list of param. See the following `Block param_list`.
     * 
     */
    private List<RuleTargetParamList> paramLists;
    /**
     * @return The retry policy that is used to push the event. Valid values:
     * - `BACKOFF_RETRY`: Backoff retry. The request can be retried up to three times. The interval between two consecutive retries is a random value between 10 and 20 seconds.
     * - `EXPONENTIAL_DECAY_RETRY`: Exponential decay retry. The request can be retried up to 176 times. The interval between two consecutive retries exponentially increases to 512 seconds, and the total retry time is one day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512, ..., and 512 seconds, including a maximum of one hundred and sixty-seven 512 seconds in total.
     * 
     */
    private @Nullable String pushRetryStrategy;
    /**
     * @return The ID of target.
     * 
     */
    private String targetId;
    /**
     * @return The type of target. Valid values: `acs.fc.function`, `acs.mns.topic`, `acs.mns.queue`,`http`,`acs.sms`,`acs.mail`,`acs.dingtalk`,`https`, `acs.eventbridge`,`acs.rabbitmq` and `acs.rocketmq`.
     * 
     */
    private String type;

    private RuleTarget() {}
    /**
     * @return Dead letter queue. Events that are not processed or exceed the number of retries will be written to the dead letter. Support message service MNS and message queue RocketMQ. See the following `Block dead_letter_queue`.
     * 
     */
    public Optional<RuleTargetDeadLetterQueue> deadLetterQueue() {
        return Optional.ofNullable(this.deadLetterQueue);
    }
    /**
     * @return The endpoint of target.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return A list of param. See the following `Block param_list`.
     * 
     */
    public List<RuleTargetParamList> paramLists() {
        return this.paramLists;
    }
    /**
     * @return The retry policy that is used to push the event. Valid values:
     * - `BACKOFF_RETRY`: Backoff retry. The request can be retried up to three times. The interval between two consecutive retries is a random value between 10 and 20 seconds.
     * - `EXPONENTIAL_DECAY_RETRY`: Exponential decay retry. The request can be retried up to 176 times. The interval between two consecutive retries exponentially increases to 512 seconds, and the total retry time is one day. The specific retry intervals are 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 512, ..., and 512 seconds, including a maximum of one hundred and sixty-seven 512 seconds in total.
     * 
     */
    public Optional<String> pushRetryStrategy() {
        return Optional.ofNullable(this.pushRetryStrategy);
    }
    /**
     * @return The ID of target.
     * 
     */
    public String targetId() {
        return this.targetId;
    }
    /**
     * @return The type of target. Valid values: `acs.fc.function`, `acs.mns.topic`, `acs.mns.queue`,`http`,`acs.sms`,`acs.mail`,`acs.dingtalk`,`https`, `acs.eventbridge`,`acs.rabbitmq` and `acs.rocketmq`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuleTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RuleTargetDeadLetterQueue deadLetterQueue;
        private String endpoint;
        private List<RuleTargetParamList> paramLists;
        private @Nullable String pushRetryStrategy;
        private String targetId;
        private String type;
        public Builder() {}
        public Builder(RuleTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deadLetterQueue = defaults.deadLetterQueue;
    	      this.endpoint = defaults.endpoint;
    	      this.paramLists = defaults.paramLists;
    	      this.pushRetryStrategy = defaults.pushRetryStrategy;
    	      this.targetId = defaults.targetId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder deadLetterQueue(@Nullable RuleTargetDeadLetterQueue deadLetterQueue) {
            this.deadLetterQueue = deadLetterQueue;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder paramLists(List<RuleTargetParamList> paramLists) {
            this.paramLists = Objects.requireNonNull(paramLists);
            return this;
        }
        public Builder paramLists(RuleTargetParamList... paramLists) {
            return paramLists(List.of(paramLists));
        }
        @CustomType.Setter
        public Builder pushRetryStrategy(@Nullable String pushRetryStrategy) {
            this.pushRetryStrategy = pushRetryStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder targetId(String targetId) {
            this.targetId = Objects.requireNonNull(targetId);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public RuleTarget build() {
            final var o = new RuleTarget();
            o.deadLetterQueue = deadLetterQueue;
            o.endpoint = endpoint;
            o.paramLists = paramLists;
            o.pushRetryStrategy = pushRetryStrategy;
            o.targetId = targetId;
            o.type = type;
            return o;
        }
    }
}
