// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.alb.inputs;

import com.pulumi.alicloud.alb.inputs.AScriptExtAttributeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AScriptState extends com.pulumi.resources.ResourceArgs {

    public static final AScriptState Empty = new AScriptState();

    /**
     * The name of AScript.
     * 
     */
    @Import(name="ascriptName")
    private @Nullable Output<String> ascriptName;

    /**
     * @return The name of AScript.
     * 
     */
    public Optional<Output<String>> ascriptName() {
        return Optional.ofNullable(this.ascriptName);
    }

    /**
     * Whether scripts are enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether scripts are enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Whether extension parameters are enabled.
     * 
     */
    @Import(name="extAttributeEnabled")
    private @Nullable Output<Boolean> extAttributeEnabled;

    /**
     * @return Whether extension parameters are enabled.
     * 
     */
    public Optional<Output<Boolean>> extAttributeEnabled() {
        return Optional.ofNullable(this.extAttributeEnabled);
    }

    /**
     * Extended attribute list. See `ext_attributes` below for details.
     * 
     */
    @Import(name="extAttributes")
    private @Nullable Output<List<AScriptExtAttributeArgs>> extAttributes;

    /**
     * @return Extended attribute list. See `ext_attributes` below for details.
     * 
     */
    public Optional<Output<List<AScriptExtAttributeArgs>>> extAttributes() {
        return Optional.ofNullable(this.extAttributes);
    }

    /**
     * Listener ID of script attribution
     * 
     */
    @Import(name="listenerId")
    private @Nullable Output<String> listenerId;

    /**
     * @return Listener ID of script attribution
     * 
     */
    public Optional<Output<String>> listenerId() {
        return Optional.ofNullable(this.listenerId);
    }

    /**
     * The ID of load balancer instance.
     * 
     */
    @Import(name="loadBalancerId")
    private @Nullable Output<String> loadBalancerId;

    /**
     * @return The ID of load balancer instance.
     * 
     */
    public Optional<Output<String>> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }

    /**
     * Execution location of AScript.
     * 
     */
    @Import(name="position")
    private @Nullable Output<String> position;

    /**
     * @return Execution location of AScript.
     * 
     */
    public Optional<Output<String>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * The content of AScript.
     * 
     */
    @Import(name="scriptContent")
    private @Nullable Output<String> scriptContent;

    /**
     * @return The content of AScript.
     * 
     */
    public Optional<Output<String>> scriptContent() {
        return Optional.ofNullable(this.scriptContent);
    }

    /**
     * The status of AScript.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of AScript.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private AScriptState() {}

    private AScriptState(AScriptState $) {
        this.ascriptName = $.ascriptName;
        this.enabled = $.enabled;
        this.extAttributeEnabled = $.extAttributeEnabled;
        this.extAttributes = $.extAttributes;
        this.listenerId = $.listenerId;
        this.loadBalancerId = $.loadBalancerId;
        this.position = $.position;
        this.scriptContent = $.scriptContent;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AScriptState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AScriptState $;

        public Builder() {
            $ = new AScriptState();
        }

        public Builder(AScriptState defaults) {
            $ = new AScriptState(Objects.requireNonNull(defaults));
        }

        /**
         * @param ascriptName The name of AScript.
         * 
         * @return builder
         * 
         */
        public Builder ascriptName(@Nullable Output<String> ascriptName) {
            $.ascriptName = ascriptName;
            return this;
        }

        /**
         * @param ascriptName The name of AScript.
         * 
         * @return builder
         * 
         */
        public Builder ascriptName(String ascriptName) {
            return ascriptName(Output.of(ascriptName));
        }

        /**
         * @param enabled Whether scripts are enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether scripts are enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param extAttributeEnabled Whether extension parameters are enabled.
         * 
         * @return builder
         * 
         */
        public Builder extAttributeEnabled(@Nullable Output<Boolean> extAttributeEnabled) {
            $.extAttributeEnabled = extAttributeEnabled;
            return this;
        }

        /**
         * @param extAttributeEnabled Whether extension parameters are enabled.
         * 
         * @return builder
         * 
         */
        public Builder extAttributeEnabled(Boolean extAttributeEnabled) {
            return extAttributeEnabled(Output.of(extAttributeEnabled));
        }

        /**
         * @param extAttributes Extended attribute list. See `ext_attributes` below for details.
         * 
         * @return builder
         * 
         */
        public Builder extAttributes(@Nullable Output<List<AScriptExtAttributeArgs>> extAttributes) {
            $.extAttributes = extAttributes;
            return this;
        }

        /**
         * @param extAttributes Extended attribute list. See `ext_attributes` below for details.
         * 
         * @return builder
         * 
         */
        public Builder extAttributes(List<AScriptExtAttributeArgs> extAttributes) {
            return extAttributes(Output.of(extAttributes));
        }

        /**
         * @param extAttributes Extended attribute list. See `ext_attributes` below for details.
         * 
         * @return builder
         * 
         */
        public Builder extAttributes(AScriptExtAttributeArgs... extAttributes) {
            return extAttributes(List.of(extAttributes));
        }

        /**
         * @param listenerId Listener ID of script attribution
         * 
         * @return builder
         * 
         */
        public Builder listenerId(@Nullable Output<String> listenerId) {
            $.listenerId = listenerId;
            return this;
        }

        /**
         * @param listenerId Listener ID of script attribution
         * 
         * @return builder
         * 
         */
        public Builder listenerId(String listenerId) {
            return listenerId(Output.of(listenerId));
        }

        /**
         * @param loadBalancerId The ID of load balancer instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(@Nullable Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId The ID of load balancer instance.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param position Execution location of AScript.
         * 
         * @return builder
         * 
         */
        public Builder position(@Nullable Output<String> position) {
            $.position = position;
            return this;
        }

        /**
         * @param position Execution location of AScript.
         * 
         * @return builder
         * 
         */
        public Builder position(String position) {
            return position(Output.of(position));
        }

        /**
         * @param scriptContent The content of AScript.
         * 
         * @return builder
         * 
         */
        public Builder scriptContent(@Nullable Output<String> scriptContent) {
            $.scriptContent = scriptContent;
            return this;
        }

        /**
         * @param scriptContent The content of AScript.
         * 
         * @return builder
         * 
         */
        public Builder scriptContent(String scriptContent) {
            return scriptContent(Output.of(scriptContent));
        }

        /**
         * @param status The status of AScript.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of AScript.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public AScriptState build() {
            return $;
        }
    }

}
