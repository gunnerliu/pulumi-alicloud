// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.lindorm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The cold storage capacity of the instance. Unit: GB.
     * 
     */
    @Import(name="coldStorage")
    private @Nullable Output<Integer> coldStorage;

    /**
     * @return The cold storage capacity of the instance. Unit: GB.
     * 
     */
    public Optional<Output<Integer>> coldStorage() {
        return Optional.ofNullable(this.coldStorage);
    }

    /**
     * The core num.
     * 
     */
    @Import(name="coreNum")
    private @Nullable Output<Integer> coreNum;

    /**
     * @return The core num.
     * 
     */
    public Optional<Output<Integer>> coreNum() {
        return Optional.ofNullable(this.coreNum);
    }

    /**
     * The core spec. **NOTE:** When `disk_category` is `local_ssd_pro` or `local_hdd_pro`, this filed is valid.
     * - When `disk_category` is `local_ssd_pro`, the valid values is `lindorm.i2.xlarge`, `lindorm.i2.2xlarge`, `lindorm.i2.4xlarge`, `lindorm.i2.8xlarge`.
     * - When `disk_category` is `local_hdd_pro`, the valid values is `lindorm.d1.2xlarge`, `lindorm.d1.4xlarge`, `lindorm.d1.6xlarge`.
     * 
     */
    @Import(name="coreSpec")
    private @Nullable Output<String> coreSpec;

    /**
     * @return The core spec. **NOTE:** When `disk_category` is `local_ssd_pro` or `local_hdd_pro`, this filed is valid.
     * - When `disk_category` is `local_ssd_pro`, the valid values is `lindorm.i2.xlarge`, `lindorm.i2.2xlarge`, `lindorm.i2.4xlarge`, `lindorm.i2.8xlarge`.
     * - When `disk_category` is `local_hdd_pro`, the valid values is `lindorm.d1.2xlarge`, `lindorm.d1.4xlarge`, `lindorm.d1.6xlarge`.
     * 
     */
    public Optional<Output<String>> coreSpec() {
        return Optional.ofNullable(this.coreSpec);
    }

    /**
     * The deletion protection of instance.
     * 
     */
    @Import(name="deletionProection")
    private @Nullable Output<Boolean> deletionProection;

    /**
     * @return The deletion protection of instance.
     * 
     */
    public Optional<Output<Boolean>> deletionProection() {
        return Optional.ofNullable(this.deletionProection);
    }

    /**
     * The disk type of instance. Valid values: `capacity_cloud_storage`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `local_ssd_pro`, `local_hdd_pro`.
     * 
     */
    @Import(name="diskCategory", required=true)
    private Output<String> diskCategory;

    /**
     * @return The disk type of instance. Valid values: `capacity_cloud_storage`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `local_ssd_pro`, `local_hdd_pro`.
     * 
     */
    public Output<String> diskCategory() {
        return this.diskCategory;
    }

    /**
     * The duration of paid. Valid when the `payment_type` is `Subscription`.  When `pricing_cycle` set to `Month`, the valid value id `1` to `9`.  When `pricing_cycle` set to `Year`, the valid value id `1` to `3`.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return The duration of paid. Valid when the `payment_type` is `Subscription`.  When `pricing_cycle` set to `Month`, the valid value id `1` to `9`.  When `pricing_cycle` set to `Year`, the valid value id `1` to `3`.
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * The count of file engine.
     * 
     */
    @Import(name="fileEngineNodeCount")
    private @Nullable Output<Integer> fileEngineNodeCount;

    /**
     * @return The count of file engine.
     * 
     */
    public Optional<Output<Integer>> fileEngineNodeCount() {
        return Optional.ofNullable(this.fileEngineNodeCount);
    }

    /**
     * The specification of file engine. Valid values: `lindorm.c.xlarge`.
     * 
     */
    @Import(name="fileEngineSpecification")
    private @Nullable Output<String> fileEngineSpecification;

    /**
     * @return The specification of file engine. Valid values: `lindorm.c.xlarge`.
     * 
     */
    public Optional<Output<String>> fileEngineSpecification() {
        return Optional.ofNullable(this.fileEngineSpecification);
    }

    /**
     * The group name.
     * 
     */
    @Import(name="groupName")
    private @Nullable Output<String> groupName;

    /**
     * @return The group name.
     * 
     */
    public Optional<Output<String>> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    /**
     * The name of the instance.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return The name of the instance.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    @Import(name="instanceStorage")
    private @Nullable Output<String> instanceStorage;

    /**
     * @return The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
     * 
     */
    public Optional<Output<String>> instanceStorage() {
        return Optional.ofNullable(this.instanceStorage);
    }

    /**
     * The ip white list of instance.
     * 
     */
    @Import(name="ipWhiteLists")
    private @Nullable Output<List<String>> ipWhiteLists;

    /**
     * @return The ip white list of instance.
     * 
     */
    public Optional<Output<List<String>>> ipWhiteLists() {
        return Optional.ofNullable(this.ipWhiteLists);
    }

    /**
     * The count of lindorm tunnel service.
     * 
     */
    @Import(name="ltsNodeCount")
    private @Nullable Output<Integer> ltsNodeCount;

    /**
     * @return The count of lindorm tunnel service.
     * 
     */
    public Optional<Output<Integer>> ltsNodeCount() {
        return Optional.ofNullable(this.ltsNodeCount);
    }

    /**
     * The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
     * 
     */
    @Import(name="ltsNodeSpecification")
    private @Nullable Output<String> ltsNodeSpecification;

    /**
     * @return The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public Optional<Output<String>> ltsNodeSpecification() {
        return Optional.ofNullable(this.ltsNodeSpecification);
    }

    /**
     * The billing method. Valid values: `PayAsYouGo` and `Subscription`.
     * 
     */
    @Import(name="paymentType", required=true)
    private Output<String> paymentType;

    /**
     * @return The billing method. Valid values: `PayAsYouGo` and `Subscription`.
     * 
     */
    public Output<String> paymentType() {
        return this.paymentType;
    }

    /**
     * The count of phoenix.
     * 
     */
    @Import(name="phoenixNodeCount")
    private @Nullable Output<Integer> phoenixNodeCount;

    /**
     * @return The count of phoenix.
     * 
     */
    public Optional<Output<Integer>> phoenixNodeCount() {
        return Optional.ofNullable(this.phoenixNodeCount);
    }

    /**
     * The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    @Import(name="phoenixNodeSpecification")
    private @Nullable Output<String> phoenixNodeSpecification;

    /**
     * @return The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public Optional<Output<String>> phoenixNodeSpecification() {
        return Optional.ofNullable(this.phoenixNodeSpecification);
    }

    /**
     * The pricing cycle. Valid when the `payment_type` is `Subscription`. Valid values: `Month` and `Year`.
     * 
     */
    @Import(name="pricingCycle")
    private @Nullable Output<String> pricingCycle;

    /**
     * @return The pricing cycle. Valid when the `payment_type` is `Subscription`. Valid values: `Month` and `Year`.
     * 
     */
    public Optional<Output<String>> pricingCycle() {
        return Optional.ofNullable(this.pricingCycle);
    }

    /**
     * The ID of the resource group.
     * 
     */
    @Import(name="resourceGroupId")
    private @Nullable Output<String> resourceGroupId;

    /**
     * @return The ID of the resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupId() {
        return Optional.ofNullable(this.resourceGroupId);
    }

    /**
     * The count of search engine.
     * 
     */
    @Import(name="searchEngineNodeCount")
    private @Nullable Output<Integer> searchEngineNodeCount;

    /**
     * @return The count of search engine.
     * 
     */
    public Optional<Output<Integer>> searchEngineNodeCount() {
        return Optional.ofNullable(this.searchEngineNodeCount);
    }

    /**
     * The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    @Import(name="searchEngineSpecification")
    private @Nullable Output<String> searchEngineSpecification;

    /**
     * @return The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public Optional<Output<String>> searchEngineSpecification() {
        return Optional.ofNullable(this.searchEngineSpecification);
    }

    /**
     * The count of table engine.
     * 
     */
    @Import(name="tableEngineNodeCount")
    private @Nullable Output<Integer> tableEngineNodeCount;

    /**
     * @return The count of table engine.
     * 
     */
    public Optional<Output<Integer>> tableEngineNodeCount() {
        return Optional.ofNullable(this.tableEngineNodeCount);
    }

    /**
     * The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    @Import(name="tableEngineSpecification")
    private @Nullable Output<String> tableEngineSpecification;

    /**
     * @return The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public Optional<Output<String>> tableEngineSpecification() {
        return Optional.ofNullable(this.tableEngineSpecification);
    }

    /**
     * A mapping of tags to assign to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return A mapping of tags to assign to the resource.
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The count of time series engine.
     * 
     */
    @Import(name="timeSeriesEngineNodeCount")
    private @Nullable Output<Integer> timeSeriesEngineNodeCount;

    /**
     * @return The count of time series engine.
     * 
     */
    public Optional<Output<Integer>> timeSeriesEngineNodeCount() {
        return Optional.ofNullable(this.timeSeriesEngineNodeCount);
    }

    /**
     * The specification of time series engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    @Import(name="timeSeriesEngineSpecification")
    private @Nullable Output<String> timeSeriesEngineSpecification;

    /**
     * @return The specification of time series engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
     * 
     */
    public Optional<Output<String>> timeSeriesEngineSpecification() {
        return Optional.ofNullable(this.timeSeriesEngineSpecification);
    }

    /**
     * Field `time_serires_engine_specification` has been deprecated from provider version 1.182.0. New field `time_series_engine_specification` instead.
     * 
     * @deprecated
     * Field &#39;time_serires_engine_specification&#39; has been deprecated from provider version 1.182.0. New field &#39;time_series_engine_specification&#39; instead.
     * 
     */
    @Deprecated /* Field 'time_serires_engine_specification' has been deprecated from provider version 1.182.0. New field 'time_series_engine_specification' instead. */
    @Import(name="timeSeriresEngineSpecification")
    private @Nullable Output<String> timeSeriresEngineSpecification;

    /**
     * @return Field `time_serires_engine_specification` has been deprecated from provider version 1.182.0. New field `time_series_engine_specification` instead.
     * 
     * @deprecated
     * Field &#39;time_serires_engine_specification&#39; has been deprecated from provider version 1.182.0. New field &#39;time_series_engine_specification&#39; instead.
     * 
     */
    @Deprecated /* Field 'time_serires_engine_specification' has been deprecated from provider version 1.182.0. New field 'time_series_engine_specification' instead. */
    public Optional<Output<String>> timeSeriresEngineSpecification() {
        return Optional.ofNullable(this.timeSeriresEngineSpecification);
    }

    /**
     * The upgrade type. **NOTE:** Field &#39;upgrade_type&#39; has been deprecated from provider version 1.163.0 and it will be removed in the future version. Valid values:  `open-lindorm-engine`, `open-phoenix-engine`, `open-search-engine`, `open-tsdb-engine`,  `upgrade-cold-storage`, `upgrade-disk-size`,  `upgrade-lindorm-core-num`, `upgrade-lindorm-engine`,  `upgrade-search-core-num`, `upgrade-search-engine`, `upgrade-tsdb-core-num`, `upgrade-tsdb-engine`.
     * 
     * @deprecated
     * Field &#39;upgrade_type&#39; has been deprecated from provider version 1.163.0 and it will be removed in the future version.
     * 
     */
    @Deprecated /* Field 'upgrade_type' has been deprecated from provider version 1.163.0 and it will be removed in the future version. */
    @Import(name="upgradeType")
    private @Nullable Output<String> upgradeType;

    /**
     * @return The upgrade type. **NOTE:** Field &#39;upgrade_type&#39; has been deprecated from provider version 1.163.0 and it will be removed in the future version. Valid values:  `open-lindorm-engine`, `open-phoenix-engine`, `open-search-engine`, `open-tsdb-engine`,  `upgrade-cold-storage`, `upgrade-disk-size`,  `upgrade-lindorm-core-num`, `upgrade-lindorm-engine`,  `upgrade-search-core-num`, `upgrade-search-engine`, `upgrade-tsdb-core-num`, `upgrade-tsdb-engine`.
     * 
     * @deprecated
     * Field &#39;upgrade_type&#39; has been deprecated from provider version 1.163.0 and it will be removed in the future version.
     * 
     */
    @Deprecated /* Field 'upgrade_type' has been deprecated from provider version 1.163.0 and it will be removed in the future version. */
    public Optional<Output<String>> upgradeType() {
        return Optional.ofNullable(this.upgradeType);
    }

    /**
     * The VPC ID of the instance.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return The VPC ID of the instance.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * The vswitch id.
     * 
     */
    @Import(name="vswitchId", required=true)
    private Output<String> vswitchId;

    /**
     * @return The vswitch id.
     * 
     */
    public Output<String> vswitchId() {
        return this.vswitchId;
    }

    /**
     * The zone ID of the instance.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The zone ID of the instance.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.coldStorage = $.coldStorage;
        this.coreNum = $.coreNum;
        this.coreSpec = $.coreSpec;
        this.deletionProection = $.deletionProection;
        this.diskCategory = $.diskCategory;
        this.duration = $.duration;
        this.fileEngineNodeCount = $.fileEngineNodeCount;
        this.fileEngineSpecification = $.fileEngineSpecification;
        this.groupName = $.groupName;
        this.instanceName = $.instanceName;
        this.instanceStorage = $.instanceStorage;
        this.ipWhiteLists = $.ipWhiteLists;
        this.ltsNodeCount = $.ltsNodeCount;
        this.ltsNodeSpecification = $.ltsNodeSpecification;
        this.paymentType = $.paymentType;
        this.phoenixNodeCount = $.phoenixNodeCount;
        this.phoenixNodeSpecification = $.phoenixNodeSpecification;
        this.pricingCycle = $.pricingCycle;
        this.resourceGroupId = $.resourceGroupId;
        this.searchEngineNodeCount = $.searchEngineNodeCount;
        this.searchEngineSpecification = $.searchEngineSpecification;
        this.tableEngineNodeCount = $.tableEngineNodeCount;
        this.tableEngineSpecification = $.tableEngineSpecification;
        this.tags = $.tags;
        this.timeSeriesEngineNodeCount = $.timeSeriesEngineNodeCount;
        this.timeSeriesEngineSpecification = $.timeSeriesEngineSpecification;
        this.timeSeriresEngineSpecification = $.timeSeriresEngineSpecification;
        this.upgradeType = $.upgradeType;
        this.vpcId = $.vpcId;
        this.vswitchId = $.vswitchId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coldStorage The cold storage capacity of the instance. Unit: GB.
         * 
         * @return builder
         * 
         */
        public Builder coldStorage(@Nullable Output<Integer> coldStorage) {
            $.coldStorage = coldStorage;
            return this;
        }

        /**
         * @param coldStorage The cold storage capacity of the instance. Unit: GB.
         * 
         * @return builder
         * 
         */
        public Builder coldStorage(Integer coldStorage) {
            return coldStorage(Output.of(coldStorage));
        }

        /**
         * @param coreNum The core num.
         * 
         * @return builder
         * 
         */
        public Builder coreNum(@Nullable Output<Integer> coreNum) {
            $.coreNum = coreNum;
            return this;
        }

        /**
         * @param coreNum The core num.
         * 
         * @return builder
         * 
         */
        public Builder coreNum(Integer coreNum) {
            return coreNum(Output.of(coreNum));
        }

        /**
         * @param coreSpec The core spec. **NOTE:** When `disk_category` is `local_ssd_pro` or `local_hdd_pro`, this filed is valid.
         * - When `disk_category` is `local_ssd_pro`, the valid values is `lindorm.i2.xlarge`, `lindorm.i2.2xlarge`, `lindorm.i2.4xlarge`, `lindorm.i2.8xlarge`.
         * - When `disk_category` is `local_hdd_pro`, the valid values is `lindorm.d1.2xlarge`, `lindorm.d1.4xlarge`, `lindorm.d1.6xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder coreSpec(@Nullable Output<String> coreSpec) {
            $.coreSpec = coreSpec;
            return this;
        }

        /**
         * @param coreSpec The core spec. **NOTE:** When `disk_category` is `local_ssd_pro` or `local_hdd_pro`, this filed is valid.
         * - When `disk_category` is `local_ssd_pro`, the valid values is `lindorm.i2.xlarge`, `lindorm.i2.2xlarge`, `lindorm.i2.4xlarge`, `lindorm.i2.8xlarge`.
         * - When `disk_category` is `local_hdd_pro`, the valid values is `lindorm.d1.2xlarge`, `lindorm.d1.4xlarge`, `lindorm.d1.6xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder coreSpec(String coreSpec) {
            return coreSpec(Output.of(coreSpec));
        }

        /**
         * @param deletionProection The deletion protection of instance.
         * 
         * @return builder
         * 
         */
        public Builder deletionProection(@Nullable Output<Boolean> deletionProection) {
            $.deletionProection = deletionProection;
            return this;
        }

        /**
         * @param deletionProection The deletion protection of instance.
         * 
         * @return builder
         * 
         */
        public Builder deletionProection(Boolean deletionProection) {
            return deletionProection(Output.of(deletionProection));
        }

        /**
         * @param diskCategory The disk type of instance. Valid values: `capacity_cloud_storage`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `local_ssd_pro`, `local_hdd_pro`.
         * 
         * @return builder
         * 
         */
        public Builder diskCategory(Output<String> diskCategory) {
            $.diskCategory = diskCategory;
            return this;
        }

        /**
         * @param diskCategory The disk type of instance. Valid values: `capacity_cloud_storage`, `cloud_efficiency`, `cloud_essd`, `cloud_ssd`, `local_ssd_pro`, `local_hdd_pro`.
         * 
         * @return builder
         * 
         */
        public Builder diskCategory(String diskCategory) {
            return diskCategory(Output.of(diskCategory));
        }

        /**
         * @param duration The duration of paid. Valid when the `payment_type` is `Subscription`.  When `pricing_cycle` set to `Month`, the valid value id `1` to `9`.  When `pricing_cycle` set to `Year`, the valid value id `1` to `3`.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration of paid. Valid when the `payment_type` is `Subscription`.  When `pricing_cycle` set to `Month`, the valid value id `1` to `9`.  When `pricing_cycle` set to `Year`, the valid value id `1` to `3`.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param fileEngineNodeCount The count of file engine.
         * 
         * @return builder
         * 
         */
        public Builder fileEngineNodeCount(@Nullable Output<Integer> fileEngineNodeCount) {
            $.fileEngineNodeCount = fileEngineNodeCount;
            return this;
        }

        /**
         * @param fileEngineNodeCount The count of file engine.
         * 
         * @return builder
         * 
         */
        public Builder fileEngineNodeCount(Integer fileEngineNodeCount) {
            return fileEngineNodeCount(Output.of(fileEngineNodeCount));
        }

        /**
         * @param fileEngineSpecification The specification of file engine. Valid values: `lindorm.c.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder fileEngineSpecification(@Nullable Output<String> fileEngineSpecification) {
            $.fileEngineSpecification = fileEngineSpecification;
            return this;
        }

        /**
         * @param fileEngineSpecification The specification of file engine. Valid values: `lindorm.c.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder fileEngineSpecification(String fileEngineSpecification) {
            return fileEngineSpecification(Output.of(fileEngineSpecification));
        }

        /**
         * @param groupName The group name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName The group name.
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param instanceName The name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName The name of the instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param instanceStorage The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
         * 
         * @return builder
         * 
         */
        public Builder instanceStorage(@Nullable Output<String> instanceStorage) {
            $.instanceStorage = instanceStorage;
            return this;
        }

        /**
         * @param instanceStorage The storage capacity of the instance. Unit: GB. For example, the value 50 indicates 50 GB.
         * 
         * @return builder
         * 
         */
        public Builder instanceStorage(String instanceStorage) {
            return instanceStorage(Output.of(instanceStorage));
        }

        /**
         * @param ipWhiteLists The ip white list of instance.
         * 
         * @return builder
         * 
         */
        public Builder ipWhiteLists(@Nullable Output<List<String>> ipWhiteLists) {
            $.ipWhiteLists = ipWhiteLists;
            return this;
        }

        /**
         * @param ipWhiteLists The ip white list of instance.
         * 
         * @return builder
         * 
         */
        public Builder ipWhiteLists(List<String> ipWhiteLists) {
            return ipWhiteLists(Output.of(ipWhiteLists));
        }

        /**
         * @param ipWhiteLists The ip white list of instance.
         * 
         * @return builder
         * 
         */
        public Builder ipWhiteLists(String... ipWhiteLists) {
            return ipWhiteLists(List.of(ipWhiteLists));
        }

        /**
         * @param ltsNodeCount The count of lindorm tunnel service.
         * 
         * @return builder
         * 
         */
        public Builder ltsNodeCount(@Nullable Output<Integer> ltsNodeCount) {
            $.ltsNodeCount = ltsNodeCount;
            return this;
        }

        /**
         * @param ltsNodeCount The count of lindorm tunnel service.
         * 
         * @return builder
         * 
         */
        public Builder ltsNodeCount(Integer ltsNodeCount) {
            return ltsNodeCount(Output.of(ltsNodeCount));
        }

        /**
         * @param ltsNodeSpecification The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder ltsNodeSpecification(@Nullable Output<String> ltsNodeSpecification) {
            $.ltsNodeSpecification = ltsNodeSpecification;
            return this;
        }

        /**
         * @param ltsNodeSpecification The specification of lindorm tunnel service. Valid values: `lindorm.g.2xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder ltsNodeSpecification(String ltsNodeSpecification) {
            return ltsNodeSpecification(Output.of(ltsNodeSpecification));
        }

        /**
         * @param paymentType The billing method. Valid values: `PayAsYouGo` and `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(Output<String> paymentType) {
            $.paymentType = paymentType;
            return this;
        }

        /**
         * @param paymentType The billing method. Valid values: `PayAsYouGo` and `Subscription`.
         * 
         * @return builder
         * 
         */
        public Builder paymentType(String paymentType) {
            return paymentType(Output.of(paymentType));
        }

        /**
         * @param phoenixNodeCount The count of phoenix.
         * 
         * @return builder
         * 
         */
        public Builder phoenixNodeCount(@Nullable Output<Integer> phoenixNodeCount) {
            $.phoenixNodeCount = phoenixNodeCount;
            return this;
        }

        /**
         * @param phoenixNodeCount The count of phoenix.
         * 
         * @return builder
         * 
         */
        public Builder phoenixNodeCount(Integer phoenixNodeCount) {
            return phoenixNodeCount(Output.of(phoenixNodeCount));
        }

        /**
         * @param phoenixNodeSpecification The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder phoenixNodeSpecification(@Nullable Output<String> phoenixNodeSpecification) {
            $.phoenixNodeSpecification = phoenixNodeSpecification;
            return this;
        }

        /**
         * @param phoenixNodeSpecification The specification of phoenix. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder phoenixNodeSpecification(String phoenixNodeSpecification) {
            return phoenixNodeSpecification(Output.of(phoenixNodeSpecification));
        }

        /**
         * @param pricingCycle The pricing cycle. Valid when the `payment_type` is `Subscription`. Valid values: `Month` and `Year`.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(@Nullable Output<String> pricingCycle) {
            $.pricingCycle = pricingCycle;
            return this;
        }

        /**
         * @param pricingCycle The pricing cycle. Valid when the `payment_type` is `Subscription`. Valid values: `Month` and `Year`.
         * 
         * @return builder
         * 
         */
        public Builder pricingCycle(String pricingCycle) {
            return pricingCycle(Output.of(pricingCycle));
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(@Nullable Output<String> resourceGroupId) {
            $.resourceGroupId = resourceGroupId;
            return this;
        }

        /**
         * @param resourceGroupId The ID of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupId(String resourceGroupId) {
            return resourceGroupId(Output.of(resourceGroupId));
        }

        /**
         * @param searchEngineNodeCount The count of search engine.
         * 
         * @return builder
         * 
         */
        public Builder searchEngineNodeCount(@Nullable Output<Integer> searchEngineNodeCount) {
            $.searchEngineNodeCount = searchEngineNodeCount;
            return this;
        }

        /**
         * @param searchEngineNodeCount The count of search engine.
         * 
         * @return builder
         * 
         */
        public Builder searchEngineNodeCount(Integer searchEngineNodeCount) {
            return searchEngineNodeCount(Output.of(searchEngineNodeCount));
        }

        /**
         * @param searchEngineSpecification The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder searchEngineSpecification(@Nullable Output<String> searchEngineSpecification) {
            $.searchEngineSpecification = searchEngineSpecification;
            return this;
        }

        /**
         * @param searchEngineSpecification The specification of search engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder searchEngineSpecification(String searchEngineSpecification) {
            return searchEngineSpecification(Output.of(searchEngineSpecification));
        }

        /**
         * @param tableEngineNodeCount The count of table engine.
         * 
         * @return builder
         * 
         */
        public Builder tableEngineNodeCount(@Nullable Output<Integer> tableEngineNodeCount) {
            $.tableEngineNodeCount = tableEngineNodeCount;
            return this;
        }

        /**
         * @param tableEngineNodeCount The count of table engine.
         * 
         * @return builder
         * 
         */
        public Builder tableEngineNodeCount(Integer tableEngineNodeCount) {
            return tableEngineNodeCount(Output.of(tableEngineNodeCount));
        }

        /**
         * @param tableEngineSpecification The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder tableEngineSpecification(@Nullable Output<String> tableEngineSpecification) {
            $.tableEngineSpecification = tableEngineSpecification;
            return this;
        }

        /**
         * @param tableEngineSpecification The specification of  table engine. Valid values: `lindorm.c.2xlarge`, `lindorm.c.4xlarge`, `lindorm.c.8xlarge`, `lindorm.c.xlarge`, `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder tableEngineSpecification(String tableEngineSpecification) {
            return tableEngineSpecification(Output.of(tableEngineSpecification));
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A mapping of tags to assign to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param timeSeriesEngineNodeCount The count of time series engine.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesEngineNodeCount(@Nullable Output<Integer> timeSeriesEngineNodeCount) {
            $.timeSeriesEngineNodeCount = timeSeriesEngineNodeCount;
            return this;
        }

        /**
         * @param timeSeriesEngineNodeCount The count of time series engine.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesEngineNodeCount(Integer timeSeriesEngineNodeCount) {
            return timeSeriesEngineNodeCount(Output.of(timeSeriesEngineNodeCount));
        }

        /**
         * @param timeSeriesEngineSpecification The specification of time series engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesEngineSpecification(@Nullable Output<String> timeSeriesEngineSpecification) {
            $.timeSeriesEngineSpecification = timeSeriesEngineSpecification;
            return this;
        }

        /**
         * @param timeSeriesEngineSpecification The specification of time series engine. Valid values: `lindorm.g.2xlarge`, `lindorm.g.4xlarge`, `lindorm.g.8xlarge`, `lindorm.g.xlarge`.
         * 
         * @return builder
         * 
         */
        public Builder timeSeriesEngineSpecification(String timeSeriesEngineSpecification) {
            return timeSeriesEngineSpecification(Output.of(timeSeriesEngineSpecification));
        }

        /**
         * @param timeSeriresEngineSpecification Field `time_serires_engine_specification` has been deprecated from provider version 1.182.0. New field `time_series_engine_specification` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;time_serires_engine_specification&#39; has been deprecated from provider version 1.182.0. New field &#39;time_series_engine_specification&#39; instead.
         * 
         */
        @Deprecated /* Field 'time_serires_engine_specification' has been deprecated from provider version 1.182.0. New field 'time_series_engine_specification' instead. */
        public Builder timeSeriresEngineSpecification(@Nullable Output<String> timeSeriresEngineSpecification) {
            $.timeSeriresEngineSpecification = timeSeriresEngineSpecification;
            return this;
        }

        /**
         * @param timeSeriresEngineSpecification Field `time_serires_engine_specification` has been deprecated from provider version 1.182.0. New field `time_series_engine_specification` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;time_serires_engine_specification&#39; has been deprecated from provider version 1.182.0. New field &#39;time_series_engine_specification&#39; instead.
         * 
         */
        @Deprecated /* Field 'time_serires_engine_specification' has been deprecated from provider version 1.182.0. New field 'time_series_engine_specification' instead. */
        public Builder timeSeriresEngineSpecification(String timeSeriresEngineSpecification) {
            return timeSeriresEngineSpecification(Output.of(timeSeriresEngineSpecification));
        }

        /**
         * @param upgradeType The upgrade type. **NOTE:** Field &#39;upgrade_type&#39; has been deprecated from provider version 1.163.0 and it will be removed in the future version. Valid values:  `open-lindorm-engine`, `open-phoenix-engine`, `open-search-engine`, `open-tsdb-engine`,  `upgrade-cold-storage`, `upgrade-disk-size`,  `upgrade-lindorm-core-num`, `upgrade-lindorm-engine`,  `upgrade-search-core-num`, `upgrade-search-engine`, `upgrade-tsdb-core-num`, `upgrade-tsdb-engine`.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;upgrade_type&#39; has been deprecated from provider version 1.163.0 and it will be removed in the future version.
         * 
         */
        @Deprecated /* Field 'upgrade_type' has been deprecated from provider version 1.163.0 and it will be removed in the future version. */
        public Builder upgradeType(@Nullable Output<String> upgradeType) {
            $.upgradeType = upgradeType;
            return this;
        }

        /**
         * @param upgradeType The upgrade type. **NOTE:** Field &#39;upgrade_type&#39; has been deprecated from provider version 1.163.0 and it will be removed in the future version. Valid values:  `open-lindorm-engine`, `open-phoenix-engine`, `open-search-engine`, `open-tsdb-engine`,  `upgrade-cold-storage`, `upgrade-disk-size`,  `upgrade-lindorm-core-num`, `upgrade-lindorm-engine`,  `upgrade-search-core-num`, `upgrade-search-engine`, `upgrade-tsdb-core-num`, `upgrade-tsdb-engine`.
         * 
         * @return builder
         * 
         * @deprecated
         * Field &#39;upgrade_type&#39; has been deprecated from provider version 1.163.0 and it will be removed in the future version.
         * 
         */
        @Deprecated /* Field 'upgrade_type' has been deprecated from provider version 1.163.0 and it will be removed in the future version. */
        public Builder upgradeType(String upgradeType) {
            return upgradeType(Output.of(upgradeType));
        }

        /**
         * @param vpcId The VPC ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The VPC ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Output<String> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId The vswitch id.
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(String vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        /**
         * @param zoneId The zone ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID of the instance.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public InstanceArgs build() {
            $.diskCategory = Objects.requireNonNull($.diskCategory, "expected parameter 'diskCategory' to be non-null");
            $.paymentType = Objects.requireNonNull($.paymentType, "expected parameter 'paymentType' to be non-null");
            $.vswitchId = Objects.requireNonNull($.vswitchId, "expected parameter 'vswitchId' to be non-null");
            return $;
        }
    }

}
