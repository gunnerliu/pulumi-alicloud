// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.alicloud.dns.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DdosBgpInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final DdosBgpInstanceState Empty = new DdosBgpInstanceState();

    /**
     * Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: 51,91,101,201,301. The unit is Gbps.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: 51,91,101,201,301. The unit is Gbps.
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * Base defend bandwidth of the instance. Valid values: 20. The unit is Gbps. Default to `20`.
     * 
     */
    @Import(name="baseBandwidth")
    private @Nullable Output<Integer> baseBandwidth;

    /**
     * @return Base defend bandwidth of the instance. Valid values: 20. The unit is Gbps. Default to `20`.
     * 
     */
    public Optional<Output<Integer>> baseBandwidth() {
        return Optional.ofNullable(this.baseBandwidth);
    }

    /**
     * IP count of the instance. Valid values: 100.
     * 
     */
    @Import(name="ipCount")
    private @Nullable Output<Integer> ipCount;

    /**
     * @return IP count of the instance. Valid values: 100.
     * 
     */
    public Optional<Output<Integer>> ipCount() {
        return Optional.ofNullable(this.ipCount);
    }

    /**
     * IP version of the instance. Valid values: IPv4,IPv6.
     * 
     */
    @Import(name="ipType")
    private @Nullable Output<String> ipType;

    /**
     * @return IP version of the instance. Valid values: IPv4,IPv6.
     * 
     */
    public Optional<Output<String>> ipType() {
        return Optional.ofNullable(this.ipType);
    }

    /**
     * Name of the instance. This name can have a string of 1 to 63 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the instance. This name can have a string of 1 to 63 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Normal defend bandwidth of the instance. The unit is Gbps.
     * 
     */
    @Import(name="normalBandwidth")
    private @Nullable Output<Integer> normalBandwidth;

    /**
     * @return Normal defend bandwidth of the instance. The unit is Gbps.
     * 
     */
    public Optional<Output<Integer>> normalBandwidth() {
        return Optional.ofNullable(this.normalBandwidth);
    }

    /**
     * The duration that you will buy Ddosbgp instance (in month). Valid values: [1~9], 12, 24, 36. Default to 12. At present, the provider does not support modify &#34;period&#34;.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The duration that you will buy Ddosbgp instance (in month). Valid values: [1~9], 12, 24, 36. Default to 12. At present, the provider does not support modify &#34;period&#34;.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * Type of the instance. Valid values: `Enterprise`, `Professional`. Default to `Enterprise`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the instance. Valid values: `Enterprise`, `Professional`. Default to `Enterprise`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DdosBgpInstanceState() {}

    private DdosBgpInstanceState(DdosBgpInstanceState $) {
        this.bandwidth = $.bandwidth;
        this.baseBandwidth = $.baseBandwidth;
        this.ipCount = $.ipCount;
        this.ipType = $.ipType;
        this.name = $.name;
        this.normalBandwidth = $.normalBandwidth;
        this.period = $.period;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DdosBgpInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DdosBgpInstanceState $;

        public Builder() {
            $ = new DdosBgpInstanceState();
        }

        public Builder(DdosBgpInstanceState defaults) {
            $ = new DdosBgpInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: 51,91,101,201,301. The unit is Gbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth Elastic defend bandwidth of the instance. This value must be larger than the base defend bandwidth. Valid values: 51,91,101,201,301. The unit is Gbps.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param baseBandwidth Base defend bandwidth of the instance. Valid values: 20. The unit is Gbps. Default to `20`.
         * 
         * @return builder
         * 
         */
        public Builder baseBandwidth(@Nullable Output<Integer> baseBandwidth) {
            $.baseBandwidth = baseBandwidth;
            return this;
        }

        /**
         * @param baseBandwidth Base defend bandwidth of the instance. Valid values: 20. The unit is Gbps. Default to `20`.
         * 
         * @return builder
         * 
         */
        public Builder baseBandwidth(Integer baseBandwidth) {
            return baseBandwidth(Output.of(baseBandwidth));
        }

        /**
         * @param ipCount IP count of the instance. Valid values: 100.
         * 
         * @return builder
         * 
         */
        public Builder ipCount(@Nullable Output<Integer> ipCount) {
            $.ipCount = ipCount;
            return this;
        }

        /**
         * @param ipCount IP count of the instance. Valid values: 100.
         * 
         * @return builder
         * 
         */
        public Builder ipCount(Integer ipCount) {
            return ipCount(Output.of(ipCount));
        }

        /**
         * @param ipType IP version of the instance. Valid values: IPv4,IPv6.
         * 
         * @return builder
         * 
         */
        public Builder ipType(@Nullable Output<String> ipType) {
            $.ipType = ipType;
            return this;
        }

        /**
         * @param ipType IP version of the instance. Valid values: IPv4,IPv6.
         * 
         * @return builder
         * 
         */
        public Builder ipType(String ipType) {
            return ipType(Output.of(ipType));
        }

        /**
         * @param name Name of the instance. This name can have a string of 1 to 63 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the instance. This name can have a string of 1 to 63 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param normalBandwidth Normal defend bandwidth of the instance. The unit is Gbps.
         * 
         * @return builder
         * 
         */
        public Builder normalBandwidth(@Nullable Output<Integer> normalBandwidth) {
            $.normalBandwidth = normalBandwidth;
            return this;
        }

        /**
         * @param normalBandwidth Normal defend bandwidth of the instance. The unit is Gbps.
         * 
         * @return builder
         * 
         */
        public Builder normalBandwidth(Integer normalBandwidth) {
            return normalBandwidth(Output.of(normalBandwidth));
        }

        /**
         * @param period The duration that you will buy Ddosbgp instance (in month). Valid values: [1~9], 12, 24, 36. Default to 12. At present, the provider does not support modify &#34;period&#34;.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The duration that you will buy Ddosbgp instance (in month). Valid values: [1~9], 12, 24, 36. Default to 12. At present, the provider does not support modify &#34;period&#34;.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param type Type of the instance. Valid values: `Enterprise`, `Professional`. Default to `Enterprise`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the instance. Valid values: `Enterprise`, `Professional`. Default to `Enterprise`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DdosBgpInstanceState build() {
            return $;
        }
    }

}
